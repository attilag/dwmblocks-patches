From a915958eab25a98323014c1589e2f6bad716e550 Mon Sep 17 00:00:00 2001
From: Attila Gluck <gluck.attila.bela@gmail.com>
Date: Mon, 24 Aug 2020 22:25:04 +0200
Subject: [PATCH 2/2] signal handler from Luke Smith

---
 dwmblocks.c | 45 ++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 40 insertions(+), 5 deletions(-)

diff --git a/dwmblocks.c b/dwmblocks.c
index 0cf62d0..e546d65 100644
--- a/dwmblocks.c
+++ b/dwmblocks.c
@@ -26,6 +26,7 @@ typedef struct {
 void dummysighandler(int num);
 #endif
 void sighandler(int num);
+void buttonhandler(int sig, siginfo_t *si, void *ucontext);
 void getcmds(int time);
 void getsigcmds(unsigned int signal);
 void setupsignals();
@@ -43,20 +44,41 @@ static int screen;
 static Window root;
 static char statusbar[LENGTH(blocks)][CMDLENGTH] = {0};
 static char statusstr[2][STATUSLENGTH];
+static char exportstring[CMDLENGTH + 16] = "export BUTTON=-;";
+static int button = 0;
 static int statusContinue = 1;
 static void (*writestatus) () = setroot;
 
 //opens process *cmd and stores output in *output
 void getcmd(const Block *block, char *output)
 {
+	if (block->signal)
+	{
+		output[0] = block->signal;
+		output++;
+	}
 	strcpy(output, block->icon);
-	FILE *cmdf = popen(block->command, "r");
-	if (!cmdf)
+	char* cmd;
+	FILE *cmdf;
+	if (button)
+	{
+		cmd = strcat(exportstring, block->command);
+		cmd[14] = '0' + button;
+		button = 0;
+		cmdf = popen(cmd,"r");
+		cmd[16] = '\0';
+	}
+	else
+	{
+		cmd = block->command;
+		cmdf = popen(cmd,"r");
+	}
+    if (!cmdf)
 		return;
 	int i = strlen(block->icon);
 	fgets(output+i, CMDLENGTH-i-delimLen, cmdf);
 	i = strlen(output);
-	if (delim[0] != '\0') {
+	if (delim != '\0' && i) {
 		//only chop off newline if one is present at the end
 		i = output[i-1] == '\n' ? i-1 : i;
 		strncpy(output+i, delim, delimLen); 
@@ -95,13 +117,19 @@ void setupsignals()
     for (int i = SIGRTMIN; i <= SIGRTMAX; i++)
         signal(i, dummysighandler);
 #endif
-
+	
+    struct sigaction sa;
+ 	
 	for (unsigned int i = 0; i < LENGTH(blocks); i++)
 	{
 		if (blocks[i].signal > 0)
 			signal(SIGMINUS+blocks[i].signal, sighandler);
-	}
+		sigaddset(&sa.sa_mask, SIGRTMIN+blocks[i].signal);
+    }
 
+	sa.sa_sigaction = buttonhandler;
+	sa.sa_flags = SA_SIGINFO;
+	sigaction(SIGUSR1, &sa, NULL); 
 }
 
 int getstatus(char *str, char *last)
@@ -150,6 +178,13 @@ void statusloop()
 	}
 }
 
+void buttonhandler(int sig, siginfo_t *si, void *ucontext)
+{
+	button = si->si_value.sival_int & 0xff;
+	getsigcmds(si->si_value.sival_int >> 8);
+	writestatus();
+}
+
 #ifndef __OpenBSD__
 /* this signal handler should do nothing */
 void dummysighandler(int signum)
-- 
2.28.0

